// ğŸ“„ Dosya: android/build.gradle.kts
// ğŸ“Œ AÃ§Ä±klama: Flutter clean desteÄŸi ve Ã¶zelleÅŸtirilmiÅŸ build dizini

// Build dizinini Ã¶zelleÅŸtirme
val newBuildDir = rootProject.layout.buildDirectory.dir("../../build").get()
rootProject.layout.buildDirectory.set(newBuildDir)

// Alt projeler iÃ§in build dizini yapÄ±landÄ±rmasÄ±
subprojects {
    val newSubprojectBuildDir = newBuildDir.dir(project.name)
    project.layout.buildDirectory.set(newSubprojectBuildDir)

    // :app modÃ¼lÃ¼ne baÄŸÄ±mlÄ±lÄ±ÄŸÄ± zorunlu kÄ±l
    project.evaluationDependsOn(":app")
}

// Temizleme gÃ¶revi (flutter clean benzeri)
tasks.register<Delete>("clean") {
    delete(rootProject.layout.buildDirectory)
    // Ek temizleme: Gradle Ã¶nbelleÄŸini ve geÃ§ici dosyalarÄ± sil
    delete(rootProject.file("build"))
    delete(rootProject.file(".gradle"))
    delete(rootProject.file("app/build"))
    println("Temizleme tamamlandÄ±: ${rootProject.layout.buildDirectory}")
}

// TÃ¼m projeler iÃ§in ek yapÄ±landÄ±rmalar
allprojects {
    repositories {
        google()
        mavenCentral()
    }

    // Gradle performans optimizasyonlarÄ±
    gradle.projectsEvaluated {
        tasks.withType<JavaCompile> {
            options.isIncremental = true // ArtÄ±mlÄ± derleme etkinleÅŸtirildi
            // Bellek ayarlarÄ± gradle.properties'e taÅŸÄ±ndÄ±
        }
    }
}

// Gradle Ã¶zelliklerini yapÄ±landÄ±rma
tasks.withType<org.gradle.api.tasks.compile.JavaCompile> {
    options.encoding = "UTF-8"
    options.isFork = true // AyrÄ± bir iÅŸlemde derleme
    options.forkOptions.memoryMaximumSize = "2g" // Maksimum bellek ayarÄ±
}